{"version":3,"sources":["components/Choices.jsx","components/Questions.jsx","App.js","serviceWorker.js","index.js"],"names":["Choices","props","click","choicesList","choiceList","incorrectChoices","concat","correctChoice","checkResults","e","target","textContent","style","color","backgroundColor","a","i","length","j","Math","floor","random","shuffle","map","item","onClick","key","indexOf","Questions","lis","document","querySelectorAll","li","useState","results","setResults","questionsList","index","setIndex","currentQuestion","setCurrentQuestion","useEffect","fetch","then","response","json","data","push","question","incorrect_answers","correct_answer","alert","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAIe,SAASA,EAAQC,GAC9B,IAAIC,EAAQ,EACRC,EAAc,GACdC,EAAaH,EAAMI,iBAAiBC,OAAOL,EAAMM,eAMrD,SAASC,EAAaC,GACN,IAAVP,IACEO,EAAEC,OAAOC,cAAgBV,EAAMM,eACjCE,EAAEC,OAAOE,MAAMC,MAAQ,QACvBJ,EAAEC,OAAOE,MAAME,gBAAkB,UAEjCL,EAAEC,OAAOE,MAAMC,MAAQ,QACvBJ,EAAEC,OAAOE,MAAME,gBAAkB,OAEnCZ,EAAQ,GAYZ,OARA,SAAiBa,GACf,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEG,GAF4B,MAlBzCI,CAAQlB,GAERD,EAAcA,EAAYG,OAAOF,GAwB/B,6BACGD,EAAYoB,KAAI,SAAAC,GAAI,OACnB,wBAAIC,QAASjB,EAAckB,IAAKvB,EAAYwB,QAAQH,IACjDA,O,YCjCI,SAASI,IACtB,IAAMC,EAAMC,SAASC,iBAAiB,MAClCC,EAAE,YAAOH,GAFqB,EAGJI,mBAAS,IAHL,mBAG3BC,EAH2B,KAGlBC,EAHkB,KAI5BC,EAAgB,GAJY,EAKRH,mBAAS,GALD,mBAK3BI,EAL2B,KAKpBC,EALoB,OAMYL,qBANZ,mBAM3BM,EAN2B,KAMVC,EANU,KAuClC,OA/BAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJX,EAAWW,EAAKZ,cAEnB,IAcCA,EAAQjB,OAAS,GACnBiB,EAAQX,KAAI,SAAAC,GAEV,OADAY,EAAcW,KAAKvB,EAAKwB,UACjBZ,KAGXK,qBAAU,kBAAMD,EAAmBJ,EAAcC,MAAS,CACxDD,EACAC,IAGEH,EAAQjB,OAAS,EAEjB,6BACE,wCACYoB,EAAQ,EADpB,QAEGE,GAEH,kBAAC,EAAD,CACElC,iBAAkB6B,EAAQG,GAAOY,kBACjC1C,cAAe2B,EAAQG,GAAOa,iBAEhC,4BAAQzB,QAAS,kBAjCrBO,EAAGT,KAAI,SAAAC,GAGL,OAFAA,EAAKZ,MAAME,gBAAkB,QAC7BU,EAAKZ,MAAMC,MAAQ,QACZ,aAELwB,EAAQ,GACVG,EAAmBJ,EAAcC,EAAQ,IACzCC,EAASD,EAAQ,IACZc,MAAM,sCAyBT,SAKF,6BACE,+CCjDOC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.20fc7219.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./css/Choices.css\";\n\nexport default function Choices(props) {\n  let click = 0;\n  let choicesList = [];\n  let choiceList = props.incorrectChoices.concat(props.correctChoice);\n\n  shuffle(choiceList);\n\n  choicesList = choicesList.concat(choiceList);\n\n  function checkResults(e) {\n    if (click !== 1) {\n      if (e.target.textContent === props.correctChoice) {\n        e.target.style.color = \"white\";\n        e.target.style.backgroundColor = \"green\";\n      } else {\n        e.target.style.color = \"white\";\n        e.target.style.backgroundColor = \"red\";\n      }\n      click = 1;\n    }\n  }\n\n  function shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  return (\n    <div>\n      {choicesList.map(item => (\n        <li onClick={checkResults} key={choicesList.indexOf(item)}>\n          {item}\n        </li>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport Choices from \"./Choices\";\r\nimport \"./css/Questions.css\";\r\nimport entities from \"entities\";\r\n\r\nexport default function Questions() {\r\n  const lis = document.querySelectorAll(\"li\");\r\n  let li = [...lis];\r\n  const [results, setResults] = useState([]);\r\n  const questionsList = [];\r\n  const [index, setIndex] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState();\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://opentdb.com/api.php?amount=10\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setResults(data.results);\r\n      });\r\n  }, []);\r\n\r\n  function nextQuestion() {\r\n    li.map(item => {\r\n      item.style.backgroundColor = \"white\";\r\n      item.style.color = \"black\";\r\n      return null;\r\n    });\r\n    if (index < 9) {\r\n      setCurrentQuestion(questionsList[index + 1]);\r\n      setIndex(index + 1);\r\n    } else alert(\"That's it.Refresh to play again\");\r\n  }\r\n\r\n  if (results.length > 0) {\r\n    results.map(item => {\r\n      questionsList.push(item.question);\r\n      return questionsList;\r\n    });\r\n  }\r\n  useEffect(() => setCurrentQuestion(questionsList[index]), [\r\n    questionsList,\r\n    index\r\n  ]);\r\n\r\n  if (results.length > 0) {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          Question {index + 1} /10:\r\n          {currentQuestion}\r\n        </h1>\r\n        <Choices\r\n          incorrectChoices={results[index].incorrect_answers}\r\n          correctChoice={results[index].correct_answer}\r\n        />\r\n        <button onClick={() => nextQuestion()}>Next</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h1>Loading Data..</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Questions from \"./components/Questions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Questions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}